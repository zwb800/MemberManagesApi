generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model employee {
  id                  Int                   @id @default(autoincrement())
  oid                 String
  name                String
  shopId              Int
  deleted             Boolean               @default(false)
  chargeItem2employee chargeItem2employee[]
}

model serviceItem {
  id                           Int                            @id @default(autoincrement())
  oid                          String
  name                         String
  shortName                    String
  price                        Int
  balance                      balance[]
  chargeItem2serviceItem       chargeItem2serviceItem[]
  consume2employee             consume2employee[]
  consume2employee2serviceItem consume2employee2serviceItem[]
  consume2serviceItem          consume2serviceItem[]
  prepaidCard2serviceItem      prepaidCard2serviceItem[]
}

model stock {
  id       Int        @id @default(autoincrement())
  count    Int
  name     String
  shopId   Int
  unit     String
  oid      String?
  stockLog stockLog[]
}

model stockLog {
  id      Int      @id @default(autoincrement())
  count   Int
  stockId Int
  time    DateTime
  stock   stock    @relation(fields: [stockId], references: [id])
}

model prepaidCard {
  id                      Int                       @id @default(autoincrement())
  deleted                 Boolean                   @default(false)
  label                   String
  price                   Int
  oid                     String?
  gift                    Int?
  discount                Decimal?
  chargeItem              chargeItem[]
  prepaidCard2serviceItem prepaidCard2serviceItem[]
  balance                 balance[]
}

model prepaidCard2serviceItem {
  id            Int         @id @default(autoincrement())
  prepaidCardId Int
  serviceItemId Int
  count         Int
  serviceItem   serviceItem @relation(fields: [serviceItemId], references: [id])
  prepaidCard   prepaidCard @relation(fields: [prepaidCardId], references: [id])
}

model member {
  id          Int           @id @default(autoincrement())
  name        String
  phone       String
  consume     Decimal
  balance     Decimal
  no          String
  openId      String
  shopId      Int
  newCardTime DateTime
  oid         String?
  balances    balance[]
  chargeItem  chargeItem[]
  consumes    consume[]
  reservation reservation[]
}

model consume {
  id        Int                   @id @default(autoincrement())
  memberId  Int
  price     Decimal
  shopId    Int
  time      DateTime
  refund    Boolean?
  member    member                @relation(fields: [memberId], references: [id])
  employees consume2employee[]
  items     consume2serviceItem[]
}

model consume2employee {
  id         Int                            @id @default(autoincrement())
  consumeId  Int
  employeeId Int
  employee   serviceItem                    @relation(fields: [employeeId], references: [id])
  consume    consume                        @relation(fields: [consumeId], references: [id])
  items      consume2employee2serviceItem[]
}

model consume2employee2serviceItem {
  id                 Int              @id @default(autoincrement())
  consume2employeeId Int
  serviceItemId      Int
  serviceItem        serviceItem      @relation(fields: [serviceItemId], references: [id])
  consume2employee   consume2employee @relation(fields: [consume2employeeId], references: [id])
}

model consume2serviceItem {
  id            Int         @id @default(autoincrement())
  consumeId     Int
  serviceItemId Int
  count         Int
  counterCard   Boolean
  serviceItem   serviceItem @relation(fields: [serviceItemId], references: [id])
  consume       consume     @relation(fields: [consumeId], references: [id])
}

model chargeItem {
  id           Int                      @id @default(autoincrement())
  pay          Decimal
  amount       Decimal
  balance      Decimal
  itemId       Int?
  shopId       Int
  time         DateTime
  memberId     Int
  refund       Boolean?
  member       member                   @relation(fields: [memberId], references: [id])
  card         prepaidCard?             @relation(fields: [itemId], references: [id])
  employees    chargeItem2employee[]
  serviceItems chargeItem2serviceItem[]
}

model chargeItem2employee {
  id         Int        @id @default(autoincrement())
  chargeId   Int
  employeeId Int
  employee   employee   @relation(fields: [employeeId], references: [id])
  charge     chargeItem @relation(fields: [chargeId], references: [id])
}

model chargeItem2serviceItem {
  id            Int         @id @default(autoincrement())
  chargeId      Int
  serviceItemId Int
  count         Int
  serviceItem   serviceItem @relation(fields: [serviceItemId], references: [id])
  charge        chargeItem  @relation(fields: [chargeId], references: [id])
}

model balance {
  id            Int          @id @default(autoincrement())
  memberId      Int
  serviceItemId Int?
  cardId        Int?
  balance       Decimal
  discount      Decimal?
  serviceItem   serviceItem? @relation(fields: [serviceItemId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  member        member       @relation(fields: [memberId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  card          prepaidCard? @relation(fields: [cardId], references: [id])
}

model reservation {
  id          Int      @id @default(autoincrement())
  num         Int
  time        DateTime
  create_time DateTime
  remark      String
  shopId      Int
  deleted     Boolean
  memberId    Int?
  member      member?  @relation(fields: [memberId], references: [id])
}

model reservationAvailable {
  id   Int     @id @default(autoincrement())
  num  Int
  time String?
}
